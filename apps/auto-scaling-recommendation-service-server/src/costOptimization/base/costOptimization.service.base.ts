/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CostOptimization as PrismaCostOptimization,
  Ec2Instance as PrismaEc2Instance,
} from "@prisma/client";

export class CostOptimizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CostOptimizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.costOptimization.count(args);
  }

  async costOptimizations<T extends Prisma.CostOptimizationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostOptimizationFindManyArgs>
  ): Promise<PrismaCostOptimization[]> {
    return this.prisma.costOptimization.findMany<Prisma.CostOptimizationFindManyArgs>(
      args
    );
  }
  async costOptimization<T extends Prisma.CostOptimizationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostOptimizationFindUniqueArgs>
  ): Promise<PrismaCostOptimization | null> {
    return this.prisma.costOptimization.findUnique(args);
  }
  async createCostOptimization<T extends Prisma.CostOptimizationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostOptimizationCreateArgs>
  ): Promise<PrismaCostOptimization> {
    return this.prisma.costOptimization.create<T>(args);
  }
  async updateCostOptimization<T extends Prisma.CostOptimizationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostOptimizationUpdateArgs>
  ): Promise<PrismaCostOptimization> {
    return this.prisma.costOptimization.update<T>(args);
  }
  async deleteCostOptimization<T extends Prisma.CostOptimizationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostOptimizationDeleteArgs>
  ): Promise<PrismaCostOptimization> {
    return this.prisma.costOptimization.delete(args);
  }

  async getEc2Instance(parentId: string): Promise<PrismaEc2Instance | null> {
    return this.prisma.costOptimization
      .findUnique({
        where: { id: parentId },
      })
      .ec2Instance();
  }
}
