/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CostOptimizationService } from "../costOptimization.service";
import { CostOptimizationCreateInput } from "./CostOptimizationCreateInput";
import { CostOptimization } from "./CostOptimization";
import { CostOptimizationFindManyArgs } from "./CostOptimizationFindManyArgs";
import { CostOptimizationWhereUniqueInput } from "./CostOptimizationWhereUniqueInput";
import { CostOptimizationUpdateInput } from "./CostOptimizationUpdateInput";

export class CostOptimizationControllerBase {
  constructor(protected readonly service: CostOptimizationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CostOptimization })
  async createCostOptimization(
    @common.Body() data: CostOptimizationCreateInput
  ): Promise<CostOptimization> {
    return await this.service.createCostOptimization({
      data: {
        ...data,

        ec2Instance: data.ec2Instance
          ? {
              connect: data.ec2Instance,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        ec2Instance: {
          select: {
            id: true,
          },
        },

        estimatedCostSaving: true,
        id: true,
        recommendedPricingModel: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CostOptimization] })
  @ApiNestedQuery(CostOptimizationFindManyArgs)
  async costOptimizations(
    @common.Req() request: Request
  ): Promise<CostOptimization[]> {
    const args = plainToClass(CostOptimizationFindManyArgs, request.query);
    return this.service.costOptimizations({
      ...args,
      select: {
        createdAt: true,

        ec2Instance: {
          select: {
            id: true,
          },
        },

        estimatedCostSaving: true,
        id: true,
        recommendedPricingModel: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CostOptimization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async costOptimization(
    @common.Param() params: CostOptimizationWhereUniqueInput
  ): Promise<CostOptimization | null> {
    const result = await this.service.costOptimization({
      where: params,
      select: {
        createdAt: true,

        ec2Instance: {
          select: {
            id: true,
          },
        },

        estimatedCostSaving: true,
        id: true,
        recommendedPricingModel: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CostOptimization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCostOptimization(
    @common.Param() params: CostOptimizationWhereUniqueInput,
    @common.Body() data: CostOptimizationUpdateInput
  ): Promise<CostOptimization | null> {
    try {
      return await this.service.updateCostOptimization({
        where: params,
        data: {
          ...data,

          ec2Instance: data.ec2Instance
            ? {
                connect: data.ec2Instance,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          ec2Instance: {
            select: {
              id: true,
            },
          },

          estimatedCostSaving: true,
          id: true,
          recommendedPricingModel: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CostOptimization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCostOptimization(
    @common.Param() params: CostOptimizationWhereUniqueInput
  ): Promise<CostOptimization | null> {
    try {
      return await this.service.deleteCostOptimization({
        where: params,
        select: {
          createdAt: true,

          ec2Instance: {
            select: {
              id: true,
            },
          },

          estimatedCostSaving: true,
          id: true,
          recommendedPricingModel: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
