/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UtilizationMetrics as PrismaUtilizationMetrics,
  Ec2Instance as PrismaEc2Instance,
} from "@prisma/client";

export class UtilizationMetricsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UtilizationMetricsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.utilizationMetrics.count(args);
  }

  async utilizationMetricsItems<
    T extends Prisma.UtilizationMetricsFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.UtilizationMetricsFindManyArgs>
  ): Promise<PrismaUtilizationMetrics[]> {
    return this.prisma.utilizationMetrics.findMany<Prisma.UtilizationMetricsFindManyArgs>(
      args
    );
  }
  async utilizationMetrics<T extends Prisma.UtilizationMetricsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilizationMetricsFindUniqueArgs>
  ): Promise<PrismaUtilizationMetrics | null> {
    return this.prisma.utilizationMetrics.findUnique(args);
  }
  async createUtilizationMetrics<T extends Prisma.UtilizationMetricsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilizationMetricsCreateArgs>
  ): Promise<PrismaUtilizationMetrics> {
    return this.prisma.utilizationMetrics.create<T>(args);
  }
  async updateUtilizationMetrics<T extends Prisma.UtilizationMetricsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilizationMetricsUpdateArgs>
  ): Promise<PrismaUtilizationMetrics> {
    return this.prisma.utilizationMetrics.update<T>(args);
  }
  async deleteUtilizationMetrics<T extends Prisma.UtilizationMetricsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilizationMetricsDeleteArgs>
  ): Promise<PrismaUtilizationMetrics> {
    return this.prisma.utilizationMetrics.delete(args);
  }

  async getEc2Instance(parentId: string): Promise<PrismaEc2Instance | null> {
    return this.prisma.utilizationMetrics
      .findUnique({
        where: { id: parentId },
      })
      .ec2Instance();
  }
}
