/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UtilizationMetricsService } from "../utilizationMetrics.service";
import { UtilizationMetricsCreateInput } from "./UtilizationMetricsCreateInput";
import { UtilizationMetrics } from "./UtilizationMetrics";
import { UtilizationMetricsFindManyArgs } from "./UtilizationMetricsFindManyArgs";
import { UtilizationMetricsWhereUniqueInput } from "./UtilizationMetricsWhereUniqueInput";
import { UtilizationMetricsUpdateInput } from "./UtilizationMetricsUpdateInput";

export class UtilizationMetricsControllerBase {
  constructor(protected readonly service: UtilizationMetricsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UtilizationMetrics })
  async createUtilizationMetrics(
    @common.Body() data: UtilizationMetricsCreateInput
  ): Promise<UtilizationMetrics> {
    return await this.service.createUtilizationMetrics({
      data: {
        ...data,

        ec2Instance: data.ec2Instance
          ? {
              connect: data.ec2Instance,
            }
          : undefined,
      },
      select: {
        cpuUsage: true,
        createdAt: true,

        ec2Instance: {
          select: {
            id: true,
          },
        },

        id: true,
        memoryUsage: true,
        networkUsage: true,
        storageUsage: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UtilizationMetrics] })
  @ApiNestedQuery(UtilizationMetricsFindManyArgs)
  async utilizationMetricsItems(
    @common.Req() request: Request
  ): Promise<UtilizationMetrics[]> {
    const args = plainToClass(UtilizationMetricsFindManyArgs, request.query);
    return this.service.utilizationMetricsItems({
      ...args,
      select: {
        cpuUsage: true,
        createdAt: true,

        ec2Instance: {
          select: {
            id: true,
          },
        },

        id: true,
        memoryUsage: true,
        networkUsage: true,
        storageUsage: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UtilizationMetrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async utilizationMetrics(
    @common.Param() params: UtilizationMetricsWhereUniqueInput
  ): Promise<UtilizationMetrics | null> {
    const result = await this.service.utilizationMetrics({
      where: params,
      select: {
        cpuUsage: true,
        createdAt: true,

        ec2Instance: {
          select: {
            id: true,
          },
        },

        id: true,
        memoryUsage: true,
        networkUsage: true,
        storageUsage: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UtilizationMetrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUtilizationMetrics(
    @common.Param() params: UtilizationMetricsWhereUniqueInput,
    @common.Body() data: UtilizationMetricsUpdateInput
  ): Promise<UtilizationMetrics | null> {
    try {
      return await this.service.updateUtilizationMetrics({
        where: params,
        data: {
          ...data,

          ec2Instance: data.ec2Instance
            ? {
                connect: data.ec2Instance,
              }
            : undefined,
        },
        select: {
          cpuUsage: true,
          createdAt: true,

          ec2Instance: {
            select: {
              id: true,
            },
          },

          id: true,
          memoryUsage: true,
          networkUsage: true,
          storageUsage: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UtilizationMetrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUtilizationMetrics(
    @common.Param() params: UtilizationMetricsWhereUniqueInput
  ): Promise<UtilizationMetrics | null> {
    try {
      return await this.service.deleteUtilizationMetrics({
        where: params,
        select: {
          cpuUsage: true,
          createdAt: true,

          ec2Instance: {
            select: {
              id: true,
            },
          },

          id: true,
          memoryUsage: true,
          networkUsage: true,
          storageUsage: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
