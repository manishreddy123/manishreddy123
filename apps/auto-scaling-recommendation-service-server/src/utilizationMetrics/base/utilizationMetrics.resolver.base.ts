/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UtilizationMetrics } from "./UtilizationMetrics";
import { UtilizationMetricsCountArgs } from "./UtilizationMetricsCountArgs";
import { UtilizationMetricsFindManyArgs } from "./UtilizationMetricsFindManyArgs";
import { UtilizationMetricsFindUniqueArgs } from "./UtilizationMetricsFindUniqueArgs";
import { CreateUtilizationMetricsArgs } from "./CreateUtilizationMetricsArgs";
import { UpdateUtilizationMetricsArgs } from "./UpdateUtilizationMetricsArgs";
import { DeleteUtilizationMetricsArgs } from "./DeleteUtilizationMetricsArgs";
import { Ec2Instance } from "../../ec2Instance/base/Ec2Instance";
import { UtilizationMetricsService } from "../utilizationMetrics.service";
@graphql.Resolver(() => UtilizationMetrics)
export class UtilizationMetricsResolverBase {
  constructor(protected readonly service: UtilizationMetricsService) {}

  async _utilizationMetricsItemsMeta(
    @graphql.Args() args: UtilizationMetricsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UtilizationMetrics])
  async utilizationMetricsItems(
    @graphql.Args() args: UtilizationMetricsFindManyArgs
  ): Promise<UtilizationMetrics[]> {
    return this.service.utilizationMetricsItems(args);
  }

  @graphql.Query(() => UtilizationMetrics, { nullable: true })
  async utilizationMetrics(
    @graphql.Args() args: UtilizationMetricsFindUniqueArgs
  ): Promise<UtilizationMetrics | null> {
    const result = await this.service.utilizationMetrics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UtilizationMetrics)
  async createUtilizationMetrics(
    @graphql.Args() args: CreateUtilizationMetricsArgs
  ): Promise<UtilizationMetrics> {
    return await this.service.createUtilizationMetrics({
      ...args,
      data: {
        ...args.data,

        ec2Instance: args.data.ec2Instance
          ? {
              connect: args.data.ec2Instance,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UtilizationMetrics)
  async updateUtilizationMetrics(
    @graphql.Args() args: UpdateUtilizationMetricsArgs
  ): Promise<UtilizationMetrics | null> {
    try {
      return await this.service.updateUtilizationMetrics({
        ...args,
        data: {
          ...args.data,

          ec2Instance: args.data.ec2Instance
            ? {
                connect: args.data.ec2Instance,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UtilizationMetrics)
  async deleteUtilizationMetrics(
    @graphql.Args() args: DeleteUtilizationMetricsArgs
  ): Promise<UtilizationMetrics | null> {
    try {
      return await this.service.deleteUtilizationMetrics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Ec2Instance, {
    nullable: true,
    name: "ec2Instance",
  })
  async getEc2Instance(
    @graphql.Parent() parent: UtilizationMetrics
  ): Promise<Ec2Instance | null> {
    const result = await this.service.getEc2Instance(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
