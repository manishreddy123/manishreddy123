/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ScalingRecommendation } from "./ScalingRecommendation";
import { ScalingRecommendationCountArgs } from "./ScalingRecommendationCountArgs";
import { ScalingRecommendationFindManyArgs } from "./ScalingRecommendationFindManyArgs";
import { ScalingRecommendationFindUniqueArgs } from "./ScalingRecommendationFindUniqueArgs";
import { CreateScalingRecommendationArgs } from "./CreateScalingRecommendationArgs";
import { UpdateScalingRecommendationArgs } from "./UpdateScalingRecommendationArgs";
import { DeleteScalingRecommendationArgs } from "./DeleteScalingRecommendationArgs";
import { Ec2Instance } from "../../ec2Instance/base/Ec2Instance";
import { ScalingRecommendationService } from "../scalingRecommendation.service";
@graphql.Resolver(() => ScalingRecommendation)
export class ScalingRecommendationResolverBase {
  constructor(protected readonly service: ScalingRecommendationService) {}

  async _scalingRecommendationsMeta(
    @graphql.Args() args: ScalingRecommendationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ScalingRecommendation])
  async scalingRecommendations(
    @graphql.Args() args: ScalingRecommendationFindManyArgs
  ): Promise<ScalingRecommendation[]> {
    return this.service.scalingRecommendations(args);
  }

  @graphql.Query(() => ScalingRecommendation, { nullable: true })
  async scalingRecommendation(
    @graphql.Args() args: ScalingRecommendationFindUniqueArgs
  ): Promise<ScalingRecommendation | null> {
    const result = await this.service.scalingRecommendation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScalingRecommendation)
  async createScalingRecommendation(
    @graphql.Args() args: CreateScalingRecommendationArgs
  ): Promise<ScalingRecommendation> {
    return await this.service.createScalingRecommendation({
      ...args,
      data: {
        ...args.data,

        ec2Instance: args.data.ec2Instance
          ? {
              connect: args.data.ec2Instance,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ScalingRecommendation)
  async updateScalingRecommendation(
    @graphql.Args() args: UpdateScalingRecommendationArgs
  ): Promise<ScalingRecommendation | null> {
    try {
      return await this.service.updateScalingRecommendation({
        ...args,
        data: {
          ...args.data,

          ec2Instance: args.data.ec2Instance
            ? {
                connect: args.data.ec2Instance,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScalingRecommendation)
  async deleteScalingRecommendation(
    @graphql.Args() args: DeleteScalingRecommendationArgs
  ): Promise<ScalingRecommendation | null> {
    try {
      return await this.service.deleteScalingRecommendation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Ec2Instance, {
    nullable: true,
    name: "ec2Instance",
  })
  async getEc2Instance(
    @graphql.Parent() parent: ScalingRecommendation
  ): Promise<Ec2Instance | null> {
    const result = await this.service.getEc2Instance(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
