/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ScalingRecommendation as PrismaScalingRecommendation,
  Ec2Instance as PrismaEc2Instance,
} from "@prisma/client";

export class ScalingRecommendationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScalingRecommendationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scalingRecommendation.count(args);
  }

  async scalingRecommendations<
    T extends Prisma.ScalingRecommendationFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ScalingRecommendationFindManyArgs>
  ): Promise<PrismaScalingRecommendation[]> {
    return this.prisma.scalingRecommendation.findMany<Prisma.ScalingRecommendationFindManyArgs>(
      args
    );
  }
  async scalingRecommendation<
    T extends Prisma.ScalingRecommendationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ScalingRecommendationFindUniqueArgs>
  ): Promise<PrismaScalingRecommendation | null> {
    return this.prisma.scalingRecommendation.findUnique(args);
  }
  async createScalingRecommendation<
    T extends Prisma.ScalingRecommendationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ScalingRecommendationCreateArgs>
  ): Promise<PrismaScalingRecommendation> {
    return this.prisma.scalingRecommendation.create<T>(args);
  }
  async updateScalingRecommendation<
    T extends Prisma.ScalingRecommendationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ScalingRecommendationUpdateArgs>
  ): Promise<PrismaScalingRecommendation> {
    return this.prisma.scalingRecommendation.update<T>(args);
  }
  async deleteScalingRecommendation<
    T extends Prisma.ScalingRecommendationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ScalingRecommendationDeleteArgs>
  ): Promise<PrismaScalingRecommendation> {
    return this.prisma.scalingRecommendation.delete(args);
  }

  async getEc2Instance(parentId: string): Promise<PrismaEc2Instance | null> {
    return this.prisma.scalingRecommendation
      .findUnique({
        where: { id: parentId },
      })
      .ec2Instance();
  }
}
