/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScalingRecommendationService } from "../scalingRecommendation.service";
import { ScalingRecommendationCreateInput } from "./ScalingRecommendationCreateInput";
import { ScalingRecommendation } from "./ScalingRecommendation";
import { ScalingRecommendationFindManyArgs } from "./ScalingRecommendationFindManyArgs";
import { ScalingRecommendationWhereUniqueInput } from "./ScalingRecommendationWhereUniqueInput";
import { ScalingRecommendationUpdateInput } from "./ScalingRecommendationUpdateInput";

export class ScalingRecommendationControllerBase {
  constructor(protected readonly service: ScalingRecommendationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScalingRecommendation })
  async createScalingRecommendation(
    @common.Body() data: ScalingRecommendationCreateInput
  ): Promise<ScalingRecommendation> {
    return await this.service.createScalingRecommendation({
      data: {
        ...data,

        ec2Instance: data.ec2Instance
          ? {
              connect: data.ec2Instance,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        ec2Instance: {
          select: {
            id: true,
          },
        },

        id: true,
        maxInstances: true,
        minInstances: true,
        recommendedInstanceType: true,
        recommendedQuantity: true,
        scalingPolicy: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScalingRecommendation] })
  @ApiNestedQuery(ScalingRecommendationFindManyArgs)
  async scalingRecommendations(
    @common.Req() request: Request
  ): Promise<ScalingRecommendation[]> {
    const args = plainToClass(ScalingRecommendationFindManyArgs, request.query);
    return this.service.scalingRecommendations({
      ...args,
      select: {
        createdAt: true,

        ec2Instance: {
          select: {
            id: true,
          },
        },

        id: true,
        maxInstances: true,
        minInstances: true,
        recommendedInstanceType: true,
        recommendedQuantity: true,
        scalingPolicy: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScalingRecommendation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scalingRecommendation(
    @common.Param() params: ScalingRecommendationWhereUniqueInput
  ): Promise<ScalingRecommendation | null> {
    const result = await this.service.scalingRecommendation({
      where: params,
      select: {
        createdAt: true,

        ec2Instance: {
          select: {
            id: true,
          },
        },

        id: true,
        maxInstances: true,
        minInstances: true,
        recommendedInstanceType: true,
        recommendedQuantity: true,
        scalingPolicy: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScalingRecommendation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScalingRecommendation(
    @common.Param() params: ScalingRecommendationWhereUniqueInput,
    @common.Body() data: ScalingRecommendationUpdateInput
  ): Promise<ScalingRecommendation | null> {
    try {
      return await this.service.updateScalingRecommendation({
        where: params,
        data: {
          ...data,

          ec2Instance: data.ec2Instance
            ? {
                connect: data.ec2Instance,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          ec2Instance: {
            select: {
              id: true,
            },
          },

          id: true,
          maxInstances: true,
          minInstances: true,
          recommendedInstanceType: true,
          recommendedQuantity: true,
          scalingPolicy: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScalingRecommendation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScalingRecommendation(
    @common.Param() params: ScalingRecommendationWhereUniqueInput
  ): Promise<ScalingRecommendation | null> {
    try {
      return await this.service.deleteScalingRecommendation({
        where: params,
        select: {
          createdAt: true,

          ec2Instance: {
            select: {
              id: true,
            },
          },

          id: true,
          maxInstances: true,
          minInstances: true,
          recommendedInstanceType: true,
          recommendedQuantity: true,
          scalingPolicy: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
