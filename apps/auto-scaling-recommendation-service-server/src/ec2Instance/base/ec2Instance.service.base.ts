/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Ec2Instance as PrismaEc2Instance,
  CostOptimization as PrismaCostOptimization,
  ScalingRecommendation as PrismaScalingRecommendation,
  UtilizationMetrics as PrismaUtilizationMetrics,
} from "@prisma/client";

export class Ec2InstanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Ec2InstanceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ec2Instance.count(args);
  }

  async ec2Instances<T extends Prisma.Ec2InstanceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.Ec2InstanceFindManyArgs>
  ): Promise<PrismaEc2Instance[]> {
    return this.prisma.ec2Instance.findMany<Prisma.Ec2InstanceFindManyArgs>(
      args
    );
  }
  async ec2Instance<T extends Prisma.Ec2InstanceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.Ec2InstanceFindUniqueArgs>
  ): Promise<PrismaEc2Instance | null> {
    return this.prisma.ec2Instance.findUnique(args);
  }
  async createEc2Instance<T extends Prisma.Ec2InstanceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.Ec2InstanceCreateArgs>
  ): Promise<PrismaEc2Instance> {
    return this.prisma.ec2Instance.create<T>(args);
  }
  async updateEc2Instance<T extends Prisma.Ec2InstanceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.Ec2InstanceUpdateArgs>
  ): Promise<PrismaEc2Instance> {
    return this.prisma.ec2Instance.update<T>(args);
  }
  async deleteEc2Instance<T extends Prisma.Ec2InstanceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.Ec2InstanceDeleteArgs>
  ): Promise<PrismaEc2Instance> {
    return this.prisma.ec2Instance.delete(args);
  }

  async findCostOptimizations(
    parentId: string,
    args: Prisma.CostOptimizationFindManyArgs
  ): Promise<PrismaCostOptimization[]> {
    return this.prisma.ec2Instance
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .costOptimizations(args);
  }

  async findScalingRecommendations(
    parentId: string,
    args: Prisma.ScalingRecommendationFindManyArgs
  ): Promise<PrismaScalingRecommendation[]> {
    return this.prisma.ec2Instance
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scalingRecommendations(args);
  }

  async findUtilizationMetricsItems(
    parentId: string,
    args: Prisma.UtilizationMetricsFindManyArgs
  ): Promise<PrismaUtilizationMetrics[]> {
    return this.prisma.ec2Instance
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .utilizationMetricsItems(args);
  }
}
